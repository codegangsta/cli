// Code generated by vfsgen; DO NOT EDIT.

package cli

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/appHelp.gotxt": &vfsgen۰CompressedFileInfo{
			name:             "appHelp.gotxt",
			modTime:          time.Time{},
			uncompressedSize: 972,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\x41\x8f\xda\x30\x10\x85\xef\xfe\x15\x23\xc4\x71\x6b\xa9\x57\xa4\x1e\x52\xa0\x80\xb4\x90\x15\x01\xa4\x8a\xf6\xe0\x5d\xa6\xc6\x95\xb1\x91\xed\x55\xb7\xb2\xfc\xdf\xab\xc4\x76\x48\x02\xea\x2d\x43\xde\xf7\xde\x30\x33\xd9\x14\xeb\xf9\x84\x00\x80\xf7\x74\xc3\x2e\x18\x82\xf7\xe2\x17\xd0\xbd\x65\x1c\x43\x80\x4f\xf5\x8b\x54\x78\x8f\xea\x14\x02\x21\xfb\xaa\x58\x64\xaa\x15\xef\xf0\xc3\xd5\x9a\x7e\x85\xd2\x36\x24\x5d\xa2\xbc\xc6\x80\x04\x1d\x84\x15\xaf\x12\xbf\x49\xc6\x6d\x08\x47\x2e\xf5\x2b\x93\xa0\xaf\x4e\x68\x65\x7f\xa6\xac\x28\x9d\xea\xcb\x85\xa9\x93\x0d\x01\xde\xe2\x23\x1c\xf3\xc3\x00\x48\xe6\x85\xe1\xb6\xed\xba\x5f\xc5\x8e\x8e\xcc\xf0\xf7\x0b\x2a\x67\x29\xa5\xb7\xb4\x4e\xe8\x01\x8d\x15\x5a\xa5\x52\x69\x07\x74\x29\x4e\xd8\xfe\x4c\xc8\x61\xbe\xad\x56\xe5\x26\x8f\xaf\x03\xdc\xbb\xcd\xd0\xbe\x19\xd1\xf4\x5a\xa3\xb3\x79\x35\xdd\xae\x5e\x76\x1d\xbc\xa7\xe8\xb2\x12\x15\xd0\xe2\xdd\x9d\xb5\xb1\x35\x5b\xec\x77\xcb\x72\xeb\xfd\x1f\xe1\xce\x30\x96\xa8\xb8\x3b\xc3\xe4\xcb\x40\x17\xbb\x46\xf8\x9c\x25\x21\x54\xfd\xc6\x52\xb0\x61\x8a\x23\x8c\x85\x3a\xe1\xc7\x13\x8c\x59\x63\x50\xfb\x0d\xbc\xa2\x22\x84\x48\x25\xa3\x24\x7f\xfc\x9f\xd3\x86\x6f\xdb\x23\x64\x5a\xae\xd7\xc5\x66\x56\x4d\x72\x6e\x2b\x62\x0e\xb9\x36\x02\x73\x5c\xba\x46\xd2\xbb\xcd\x49\xeb\x3f\xa0\x6f\x11\x00\x0d\xf0\x5b\x0b\x15\x3d\x2c\x8c\x9e\x60\x54\x33\xa3\x1f\x6e\x74\xbb\xd0\xfb\x9e\xef\x5b\x4f\xc7\x49\xc8\xe2\xb9\xfc\x5a\x3c\x43\xd9\x6c\xac\x7a\x3c\xb9\x78\x89\xcd\xe4\xfa\xf8\x7f\xc6\xa7\x87\xfb\xee\x5d\xfd\xf5\xaf\x11\xfc\xec\xe2\xe0\x5e\xbe\x6f\x57\x8b\xe5\x2e\x9f\x4b\xe7\x6d\xfe\x2e\xff\x05\x00\x00\xff\xff\xc2\xf6\xc6\xbf\xcc\x03\x00\x00"),
		},
		"/commandHelp.gotxt": &vfsgen۰CompressedFileInfo{
			name:             "commandHelp.gotxt",
			modTime:          time.Time{},
			uncompressedSize: 404,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\x41\x4e\xc3\x30\x10\x45\xf7\x3e\x85\x2f\x80\x0f\xc0\x2e\x4a\x43\xe9\x82\x04\x35\x29\x12\xaa\x58\x98\x76\xb0\x2c\x25\x4e\xe5\x31\x12\x68\x34\x77\x47\x8e\x63\x82\x59\x59\xe3\xff\xdf\xfc\xf9\x6d\xf5\xd4\xdc\x0b\x29\x25\x91\x7a\x84\xf1\xd6\xea\x09\x98\xe5\x5d\x9c\x4f\xa8\x0d\x30\x0b\x71\xea\xab\x7d\x76\xd9\x0f\x99\x84\x01\xbe\x02\x73\xb6\xe5\x09\x46\x84\xe5\x77\x5b\x96\x98\x17\x8b\xf6\x7d\x84\x87\x51\x1b\x64\x96\xe7\xcb\x3c\x4d\xda\x5d\xe5\x7c\x0b\x76\x76\xf8\x46\x04\xee\xca\xbc\x26\x54\xde\xe0\x1a\x4f\x54\x4e\x29\xe1\xac\xbd\xf9\x9c\xc0\x05\x54\x4a\x65\xf8\xf7\x89\x2b\x6a\x1d\xc0\xcc\xfe\x3b\x16\xa8\xab\xa1\xd9\x77\xc7\xd7\xdc\x74\xd3\x0a\x64\x07\x78\xf1\x76\x39\x28\x52\xbb\xa6\xaf\x8f\x87\xe7\xe1\xd0\xb5\x19\x2c\x1c\x05\x5b\xf6\x13\xa2\x5b\xb8\x7e\x05\xbd\x76\x06\xfe\x9b\x88\x14\x73\xd2\xff\x9e\x2f\x7e\x02\x00\x00\xff\xff\xc3\x6d\x06\x56\x94\x01\x00\x00"),
		},
		"/subcommandHelp.gotxt": &vfsgen۰CompressedFileInfo{
			name:             "subcommandHelp.gotxt",
			modTime:          time.Time{},
			uncompressedSize: 507,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x50\x4b\x4e\xc3\x30\x10\xdd\xe7\x14\xa3\xac\xc1\x07\xc8\x2e\x6a\xf9\x2d\x92\x20\xa5\x65\x53\x58\x98\x76\xb0\x8c\x12\xa7\xf2\x18\x09\x69\xe4\xbb\x23\xc7\x8e\x21\xa5\xbb\xbc\xcc\xfb\xf9\xb5\x75\x73\x57\x15\x00\xc0\x2c\x1e\x71\x38\xb7\x72\x44\xef\xe1\x16\x98\xf5\x07\x88\x2d\xd2\xd1\xea\xb3\xd3\x93\xf1\x9e\xf9\x12\xe3\x40\x38\xff\xdf\x93\x54\xf3\x17\x9a\x93\xf7\x45\xb1\xef\xeb\x87\xc5\x37\xf8\xcc\xf7\x1d\x7e\xbb\x5f\xf6\x82\xb2\xc7\x9f\xf8\xe3\x34\x8e\xd2\x9c\xa2\xf6\x45\x93\x7e\x1f\xf0\x7e\x90\x8a\xbc\x87\x43\x3a\xc2\x34\xd7\xa0\xb7\x14\x9a\x92\x6a\xab\x28\xb7\x59\xa3\x98\x74\x90\x56\x7d\x8d\x68\x1c\x09\x21\x16\x71\x2e\xbe\xe9\x9a\xa6\x6e\xb7\x7d\xc5\x6c\xa5\x51\x98\xe3\x37\xd2\xa1\x9a\xac\x46\x0a\xec\x90\x14\xbb\xa6\xed\x22\xa8\xb2\xdd\x85\x38\x56\xa6\x48\x0f\x82\xcf\x49\x9b\x68\x41\x50\xde\x40\x19\x34\xe5\xab\x2b\xaf\xad\x99\x4d\xff\xaf\x51\x74\xcf\xbb\xa7\xae\xed\xd3\xd4\xeb\xd4\xc4\x61\x16\x4b\xcd\xd5\x5b\x7f\x02\x00\x00\xff\xff\x3c\x2e\x01\xc5\xfb\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/appHelp.gotxt"].(os.FileInfo),
		fs["/commandHelp.gotxt"].(os.FileInfo),
		fs["/subcommandHelp.gotxt"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
