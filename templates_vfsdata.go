// Code generated by vfsgen; DO NOT EDIT.

package cli

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Time{},
		},
		"/appHelp.gotxt": &vfsgen۰CompressedFileInfo{
			name:             "appHelp.gotxt",
			modTime:          time.Time{},
			uncompressedSize: 964,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x53\xcd\x8e\xda\x30\x10\xbe\xe7\x29\x46\x88\xe3\x36\x52\xaf\x48\x3d\xa4\x40\x01\x69\x21\x2b\x02\x48\x15\xed\xc1\xbb\x4c\x8d\x2b\x63\x23\xdb\xab\x6e\x65\xcd\xbb\x57\xc4\x76\xfe\x40\xbd\x65\xc8\xf7\xc7\xcc\x97\x4d\xb1\x9e\x4f\x32\x00\xf0\x3e\xdf\xb0\x0b\x12\x79\x2f\x7e\x41\xbe\xb7\x8c\x23\x11\x7c\xba\xbd\x88\x83\xf7\xa8\x4e\x44\xd9\xbe\x2a\x16\x89\xd4\x60\x77\xf8\xe1\x6e\x90\xfe\x84\xd2\xd6\xc4\x7c\x89\xf2\x1a\xf4\x23\xe9\x20\xac\x78\x95\xf8\x4d\x32\x6e\x89\x8e\x5c\xea\x57\x26\x41\x5f\x9d\xd0\xca\xfe\x8c\x56\x01\x3a\xd5\x97\x0b\x53\x27\x4b\x04\x6f\xe1\x11\x8e\xe9\x61\x40\x88\xe2\x85\xe1\xb6\x09\xdd\x9f\x42\xa2\x23\x33\xfc\xfd\x82\xca\xd9\x3c\xcf\x5b\xb7\x8e\xe9\x01\x8d\x15\x5a\xc5\x51\x69\x07\xf9\x52\x9c\xb0\xf9\x39\x3b\xcc\xb7\xd5\xaa\xdc\xa4\xe5\x75\xf0\xf7\x62\x33\xb4\x6f\x46\xd4\x51\x89\xb2\xd9\xbc\x9a\x6e\x57\x2f\xbb\x0e\xbb\x07\xe8\x52\x25\x2a\xc8\x8b\x77\x77\xd6\xc6\x12\x65\xc5\x7e\xb7\x2c\xb7\xde\xff\x11\xee\x0c\x63\x89\x8a\xbb\x33\x4c\xbe\x0c\x60\x21\x32\xc2\xe7\x04\x21\xaa\xfa\xb1\xa2\xaf\x61\x8a\x23\x8c\x85\x3a\xe1\xc7\x13\x8c\x59\x2d\x70\xd3\x1b\x68\x05\x04\x51\x60\x45\xa1\x08\x7f\xfc\x8f\xe3\x79\xdb\xd3\x65\xd3\x72\xbd\x2e\x36\xb3\x6a\x92\x6c\x1b\x0c\x73\xc8\xb5\x11\x98\xdc\x62\x11\x7b\xad\x9c\x34\xea\x03\x72\x6b\x00\x50\x13\x7e\x6b\xa1\x82\x84\x85\xd1\x13\x8c\x6e\x9c\xd1\x0f\x37\x6a\xcb\x79\x9f\xf8\x3e\x78\xec\x65\xb6\x78\x2e\xbf\x16\xcf\x50\xd6\xd7\xaa\x1e\xaf\x2d\x74\xb0\x5e\x5b\x9f\xfd\x9f\xdd\xe9\xe1\xad\x7b\x7d\xbf\xfe\x35\x82\x9f\x5d\xbd\xb5\x97\xef\xdb\xd5\x62\xb9\x4b\x4d\xe9\xbc\x4c\xdf\xe3\xbf\x00\x00\x00\xff\xff\x86\xa7\x1c\x87\xc4\x03\x00\x00"),
		},
		"/commandHelp.gotxt": &vfsgen۰CompressedFileInfo{
			name:             "commandHelp.gotxt",
			modTime:          time.Time{},
			uncompressedSize: 400,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8f\xc1\x4e\xc3\x30\x0c\x86\xef\x79\x8a\xbc\x00\x79\x00\x6e\x55\x57\xc6\x0e\xb4\x68\xed\x90\xd0\xc4\x21\x6c\x26\x8a\xd4\xa6\x53\x5c\x24\x90\xf5\xbf\x3b\x5a\xdb\x30\xc2\xc9\xfa\xed\xff\xf3\x6f\xd7\xc5\x53\x75\xaf\xb4\xd6\x22\xe6\x91\xfa\x4b\x6d\x07\x02\xf4\xdd\x55\x1f\xd8\x3a\x02\xd4\xa1\x2d\xb6\xc9\xe4\x3f\xf4\xd2\xef\xe8\x6b\x02\x92\x2b\x29\xea\x99\xe6\xee\x6d\xd7\xc2\xbc\x78\xf6\xef\x3d\x3d\xf4\xd6\x31\xa0\x8f\xa7\x71\x18\x6c\x38\xeb\xf1\x32\xf9\x31\xf0\x9b\x08\x85\x33\xb0\x26\x14\xd1\xf1\x9a\x2e\x92\xab\x25\xe1\x68\xa3\xfb\x1c\x28\x4c\x6c\x8c\x49\xf0\x6f\xb9\xae\x28\xed\x44\x6e\x8c\xdf\x80\x2a\x8b\xae\xda\x36\xfb\xd7\xf4\xe7\x6d\x94\x11\x1b\xe2\x53\xf4\xf3\x3d\x80\xda\x54\x6d\xb9\xdf\x3d\x77\xbb\xa6\x4e\x5c\x66\xc8\xd0\xfc\x3b\xd5\xcc\x58\xbb\x72\xd1\x06\x47\xff\x3d\x22\x06\x58\xe6\x7f\x6f\x57\x3f\x01\x00\x00\xff\xff\xd1\x40\x31\x4b\x90\x01\x00\x00"),
		},
		"/subcommandHelp.gotxt": &vfsgen۰CompressedFileInfo{
			name:             "subcommandHelp.gotxt",
			modTime:          time.Time{},
			uncompressedSize: 505,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x50\x4b\x4e\xc3\x30\x10\xdd\xe7\x14\xa3\xac\xc1\x07\xc8\x2e\x6a\xf9\x2d\x92\x20\xa5\x65\x53\x58\x98\x76\xb0\x8c\x12\xa7\xca\x18\x09\x69\xe4\xbb\x23\xc7\x1f\x48\xe9\x2e\x2f\xf3\x7e\x7e\x6d\xdd\xdc\x55\x05\x00\x30\x8b\x47\x1c\xce\xad\x1c\xd1\x39\xb8\x05\x66\xfd\x01\x62\x8b\x74\x9c\xf5\xd9\xea\xc9\x38\xc7\x7c\x89\x71\x20\x5c\xfe\xef\x49\xaa\xe5\x0b\xcd\xc9\xb9\x62\xdf\xd7\x0f\xc9\xd6\xdb\x2c\xe7\x1d\x7e\xdb\x5f\x72\x42\xd9\xe2\x4f\xfa\x71\x1a\x47\x69\x4e\x41\xfb\xa2\x49\xbf\x0f\x78\x3f\x48\x45\xce\xc1\x21\x1e\x61\x5a\x5a\xd0\x5b\xcc\x8c\x49\xf5\xac\x28\x97\x59\xa3\x90\x74\x90\xb3\xfa\x1a\xd1\x58\x12\x42\x24\x71\xea\xbd\xe9\x9a\xa6\x6e\xb7\x7d\xc5\x3c\x4b\xa3\x30\xa7\x6f\xa4\x45\x35\xcd\x1a\xc9\x93\x7d\x50\xa8\x1a\x97\x0b\xa0\xca\x6e\x17\xe2\xd0\x98\x02\xdd\x0b\x3e\x27\x6d\x82\x05\x41\x79\x03\xa5\xd7\x94\xaf\xb6\xbc\xb6\x65\x36\xfd\x3f\x46\xd1\x3d\xef\x9e\xba\xb6\x8f\x4b\xaf\x53\x23\x87\x59\xa4\x9a\xab\xa7\xfe\x04\x00\x00\xff\xff\x20\x25\xbb\x07\xf9\x01\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/appHelp.gotxt"].(os.FileInfo),
		fs["/commandHelp.gotxt"].(os.FileInfo),
		fs["/subcommandHelp.gotxt"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
